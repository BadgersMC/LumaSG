plugins {
    id 'java'
    id 'io.github.goooler.shadow' version '8.1.8'
    id 'maven-publish'
}

group = 'net.lumalyte'
version = '1.0.0'
description = 'A modern Survival Games plugin for Paper servers, Tailored for Lumalyte.net'

repositories {
    mavenCentral()
    maven {
        name = 'papermc-repo'
        url = 'https://repo.papermc.io/repository/maven-public/'
    }

    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven {
        name = 'xenondevs'
        url = 'https://repo.xenondevs.xyz/releases'
    }
    maven {
        name = 'placeholderapi'
        url = 'https://repo.extendedclip.com/content/repositories/placeholderapi/'
    }
    maven {
        name = 'jitpack'
        url = 'https://jitpack.io'
    }
    maven {
        name = 'nexo'
        url = 'https://repo.nexomc.com/releases'
    }
}

dependencies {
    compileOnly 'io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT'
    compileOnly 'net.kyori:adventure-text-minimessage:4.14.0'
    
    compileOnly 'xyz.xenondevs.invui:invui-core:1.46'
    compileOnly 'xyz.xenondevs.invui:inventory-access-r22:1.46'
    
    compileOnly 'com.mojang:brigadier:1.0.18'
    compileOnly 'com.github.PlaceholderAPI:PlaceholderAPI:2.11.2'
    compileOnly 'com.nexomc:nexo:1.8.0'

    compileOnly 'com.squareup.okhttp3:okhttp:4.12.0'

    // Runtime-loaded dependencies (loaded by LumaSGLibraryLoader)
    // These are loaded at runtime by Paper's library system, reducing JAR size
    compileOnly 'com.github.ben-manes.caffeine:caffeine:3.2.1'
    compileOnly 'com.zaxxer:HikariCP:5.0.1'
    compileOnly 'org.postgresql:postgresql:42.6.0'
    compileOnly 'mysql:mysql-connector-java:8.0.33'
    compileOnly 'com.esotericsoftware:kryo:5.6.2'
    compileOnly 'org.hibernate.validator:hibernate-validator:9.0.1.Final'
    compileOnly 'org.apache.commons:commons-text:1.10.0'
    
    // Testing dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testImplementation 'org.mockito:mockito-core:5.8.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.8.0'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation 'org.awaitility:awaitility:4.2.0'
    
    // Add test dependencies for Bukkit/Adventure API and runtime libraries
    testImplementation 'io.papermc.paper:paper-api:1.21.4-R0.1-SNAPSHOT'
    testImplementation 'net.kyori:adventure-text-minimessage:4.14.0'
    testImplementation 'net.kyori:adventure-api:4.14.0'
    testImplementation 'net.kyori:adventure-text-serializer-legacy:4.14.0'
    
    // Test implementations of runtime-loaded dependencies
    testImplementation 'com.github.ben-manes.caffeine:caffeine:3.2.1'
    testImplementation 'com.zaxxer:HikariCP:5.0.1'
    testImplementation 'org.postgresql:postgresql:42.6.0'
    testImplementation 'mysql:mysql-connector-java:8.0.33'
    testImplementation 'com.esotericsoftware:kryo:5.6.2'
    testImplementation 'org.hibernate.validator:hibernate-validator:9.0.1.Final'
    testImplementation 'org.apache.commons:commons-text:1.10.0'
    
    // Test runtime dependencies
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
    options.encoding = 'UTF-8'
    options.compilerArgs += ['-Xlint:deprecation']
}

processResources {
    def props = [version: version, description: project.description]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('paper-plugin.yml') {
        expand props
    }
}

shadowJar {
    archiveClassifier.set('')
    archiveBaseName.set(project.name)
    archiveVersion.set(version)
    
    // No need to minimize since we're using runtime library loading
    // This will result in a much smaller JAR file
    
    manifest {
        attributes('paperweight-mappings-namespace': 'mojang')
    }
}

build {
    dependsOn shadowJar
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }
    }
}

// Test configuration
test {
    useJUnitPlatform()
    
    // Test filtering - exclude flaky tests in CI environments
    if (System.getenv("CI") == "true") {
        exclude "**/*PerformanceDemo*"
    }
    
    // Parallel execution configuration
    systemProperty 'junit.jupiter.execution.parallel.enabled', 'false' // Disable for more stable tests
    systemProperty 'junit.jupiter.execution.parallel.mode.default', 'same_thread'
    
    // Memory settings for tests
    jvmArgs '-Xmx1g', '-XX:+UseG1GC'
    
    // Test reporting
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
        showStandardStreams = false
        showStackTraces = true
    }
    
    // Timeout for tests
    timeout = Duration.ofMinutes(5)
    
    // Test result handling
    ignoreFailures = false
    
    // System properties for tests
    systemProperty 'java.awt.headless', 'true'
    systemProperty 'file.encoding', 'UTF-8'
}

// Publishing configuration for GitHub Packages (optional)
publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            artifact shadowJar
        }
    }
} 