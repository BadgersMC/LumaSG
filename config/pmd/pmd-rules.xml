<?xml version="1.0"?>
<ruleset name="LumaSG PMD Rules"
         xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 
                             https://pmd.sourceforge.io/ruleset_2_0_0.xsd">
    
    <description>
        PMD rules for the LumaSG Survival Games plugin to maintain code quality
    </description>

    <!-- Best Practices Rules -->
    <rule ref="category/java/bestpractices.xml">
        <!-- Allow System.out.println in test files -->
        <exclude name="SystemPrintln"/>
        <!-- Allow public static main in test classes -->
        <exclude name="UseVarargs"/>
    </rule>
    
    <!-- Code Style Rules -->
    <rule ref="category/java/codestyle.xml">
        <!-- Allow long variable names (common in Minecraft plugins) -->
        <exclude name="LongVariable"/>
        <!-- Allow short variable names for common patterns -->
        <exclude name="ShortVariable"/>
        <!-- Allow short method names -->
        <exclude name="ShortMethodName"/>
        <!-- Allow default package access for internal classes -->
        <exclude name="DefaultPackage"/>
        <!-- Allow multiple unrelated variables in one declaration -->
        <exclude name="LocalVariableCouldBeFinal"/>
        <!-- Allow method parameter reassignment -->
        <exclude name="MethodArgumentCouldBeFinal"/>
    </rule>
    
    <!-- Design Rules -->
    <rule ref="category/java/design.xml">
        <!-- Allow higher complexity for initialization methods -->
        <exclude name="CyclomaticComplexity"/>
        <!-- Allow more parameters for configuration methods -->
        <exclude name="ExcessiveParameterList"/>
        <!-- Allow longer methods for complex game logic -->
        <exclude name="ExcessiveMethodLength"/>
        <!-- Allow more fields in manager classes -->
        <exclude name="TooManyFields"/>
    </rule>
    
    <!-- Custom complexity rule with higher threshold -->
    <rule ref="category/java/design.xml/CyclomaticComplexity">
        <properties>
            <property name="classReportLevel" value="80"/>
            <property name="methodReportLevel" value="15"/>
            <property name="cycloOptions" value=""/>
        </properties>
    </rule>
    
    <!-- Custom parameter list rule with higher threshold -->
    <rule ref="category/java/design.xml/ExcessiveParameterList">
        <properties>
            <property name="minimum" value="8"/>
        </properties>
    </rule>
    
    <!-- Documentation Rules -->
    <rule ref="category/java/documentation.xml">
        <!-- Require documentation for public methods -->
        <exclude name="CommentRequired"/>
        <!-- Allow missing JavaDoc for simple getters/setters -->
        <exclude name="CommentSize"/>
    </rule>
    
    <!-- Error Prone Rules -->
    <rule ref="category/java/errorprone.xml">
        <!-- Allow empty catch blocks with comments explaining why -->
        <exclude name="EmptyCatchBlock"/>
        <!-- Allow assignments in operands for fluent interfaces -->
        <exclude name="AssignmentInOperand"/>
        <!-- Allow data flow anomalies in complex async code -->
        <exclude name="DataflowAnomalyAnalysis"/>
    </rule>
    
    <!-- Multithreading Rules -->
    <rule ref="category/java/multithreading.xml">
        <!-- Allow double-checked locking pattern -->
        <exclude name="DoubleCheckedLocking"/>
    </rule>
    
    <!-- Performance Rules -->
    <rule ref="category/java/performance.xml">
        <!-- Allow string concatenation in logging (handled by logger) -->
        <exclude name="ConsecutiveLiteralAppends"/>
        <!-- Allow inefficient string buffering in simple cases -->
        <exclude name="InsufficientStringBufferDeclaration"/>
    </rule>
    
    <!-- Security Rules -->
    <rule ref="category/java/security.xml"/>
    
    <!-- Custom rules for Minecraft plugin development -->
    <rule name="NoSystemOutInProduction"
          language="java"
          message="Avoid System.out.println in production code, use logger instead"
          class="net.sourceforge.pmd.lang.rule.xpath.XPathRule">
        <description>
            System.out.println should not be used in production code. Use the plugin logger instead.
        </description>
        <priority>3</priority>
        <properties>
            <property name="xpath">
                <value>
                <![CDATA[
                //PrimaryExpression[
                    PrimaryPrefix/Name[@Image='System.out.println'] 
                    and not(ancestor::MethodDeclaration[contains(@Name, 'test')])
                    and not(ancestor::ClassOrInterfaceDeclaration[contains(@Image, 'Test')])
                ]
                ]]>
                </value>
            </property>
        </properties>
    </rule>
    
</ruleset>